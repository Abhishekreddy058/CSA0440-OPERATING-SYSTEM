#include <stdio.h>
struct Process {
    int id;
    int burst_time;       
    int remaining_time;   
    int waiting_time;     
    int turnaround_time;  
};
int main() {
    int n, quantum, time = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for Process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].waiting_time = 0;
    }
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    int completed = 0;
    while (completed < n) {
        completed = 0; 
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].waiting_time = time - processes[i].burst_time;
                    processes[i].turnaround_time = time;
                    processes[i].remaining_time = 0;
                }
            }
            if (processes[i].remaining_time == 0) {
                completed++;
            }
        }
    }
    printf("Process ID | Burst Time | Waiting Time | Turnaround Time\n");
    printf("--------------------------------------------------------\n");
    for (int i = 0; i < n; i++) {
        printf("     %d      |     %d     |      %d       |       %d\n",
               processes[i].id, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    return 0;
}
